{"filter":false,"title":"main.tf","tooltip":"/terraform_code/dev/main.tf","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":158,"column":0},"action":"remove","lines":["","#  Define the provider","provider \"aws\" {","  region = \"us-east-1\"","}","","# Data source for Amazon Linux AMI","data \"aws_ami\" \"latest_amazon_linux\" {","  owners      = [\"amazon\"]","  most_recent = true","  filter {","    name   = \"name\"","    values = [\"amzn2-ami-hvm-*-x86_64-gp2\"]","  }","}","","# Data source for availability zones in us-east-1","data \"aws_availability_zones\" \"available\" {","  state = \"available\"","}","","# Data source to retrieve the default VPC id","data \"aws_vpc\" \"default\" {","  default = true","}","","# Define tags locally and naming prefix","locals {","  default_tags = {","    \"env\" = var.env","  }","  prefix = var.prefix","  name_prefix = \"${local.prefix}-${var.env}\"","}","","","# ECR Repository for mysql","resource \"aws_ecr_repository\" \"mysql\" {","  name = \"my-mysql-repo\"","  force_delete = true","  tags = merge(local.default_tags, { \"Name\" = \"my-mysql-repo\" })","}","","# ECR Repository for webapp","resource \"aws_ecr_repository\" \"webapp\" {","  name = \"my-webapp-repo\"","  force_delete = true","  tags = merge(local.default_tags, { \"Name\" = \"my-webapp-repo\" })","}","","# Retrieve IAM Instance Profile","data \"aws_iam_instance_profile\" \"ec2_profile\" {","  name = \"LabInstanceProfile\"","}","","# EC2 Instance","resource \"aws_instance\" \"my_amazon\" {","  ami                         = data.aws_ami.latest_amazon_linux.id","  instance_type               = \"t2.micro\"  # or use a variable if needed","  key_name                    = aws_key_pair.my_key.key_name","  vpc_security_group_ids      = [aws_security_group.my_sg.id]","  associate_public_ip_address = false","","  iam_instance_profile = data.aws_iam_instance_profile.ec2_profile.name","","  user_data = <<-EOF","    #!/bin/bash","    sudo yum update -y","    sudo amazon-linux-extras install docker -y","    sudo systemctl start docker","    sudo systemctl enable docker","    sudo usermod -a -G docker ec2-user","  EOF","","  lifecycle {","    create_before_destroy = true","  }","","  tags = merge(local.default_tags, { \"Name\" = \"webapp-instance\" })","}","","# Key Pair","resource \"aws_key_pair\" \"my_key\" {","  key_name   = \"assignment-dev\"","  public_key = file(\"~/.ssh/assignment-dev.pub\")","}","","# Security Group","resource \"aws_security_group\" \"my_sg\" {","  name        = \"allow_ssh\"","  description = \"Allow SSH inbound traffic\"","  vpc_id      = data.aws_vpc.default.id","  ","  ingress {","    description = \"SSH from everywhere\"","    from_port   = 22","    to_port     = 22","    protocol    = \"tcp\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","","  ingress {","    description = \"HTTP\"","    from_port   = 80","    to_port     = 80","    protocol    = \"tcp\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","  ","  ingress {","    description = \"HTTP on port 8080\"","    from_port   = 8080","    to_port     = 8080","    protocol    = \"tcp\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","  ","  ingress {","    description = \"HTTP on port 8081\"","    from_port   = 8081","    to_port     = 8081","    protocol    = \"tcp\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","","  ingress {","    description = \"HTTP on port 8082\"","    from_port   = 8082","    to_port     = 8082","    protocol    = \"tcp\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","  ","  ","  ingress {","    description = \"HTTP on port 8083\"","    from_port   = 8083","    to_port     = 8083","    protocol    = \"tcp\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","  ","","  egress {","    from_port   = 0","    to_port     = 0","    protocol    = \"-1\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","","  tags = merge(local.default_tags, { \"Name\" = \"${local.name_prefix}-sg\" })","}","","# Elastic IP","resource \"aws_eip\" \"static_eip\" {","  instance = aws_instance.my_amazon.id","  tags = merge(local.default_tags, { \"Name\" = \"${local.name_prefix}-eip\" })","}",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":163,"column":0},"action":"insert","lines":["#  Define the provider","provider \"aws\" {","  region = \"us-east-1\"","}","","# Data source for Amazon Linux AMI","data \"aws_ami\" \"latest_amazon_linux\" {","  owners      = [\"amazon\"]","  most_recent = true","  filter {","    name   = \"name\"","    values = [\"amzn2-ami-hvm-*-x86_64-gp2\"]","  }","}","","# Data source for availability zones in us-east-1","data \"aws_availability_zones\" \"available\" {","  state = \"available\"","}","","# Data source to retrieve the default VPC id","data \"aws_vpc\" \"default\" {","  default = true","}","","# Define tags locally and naming prefix","locals {","  default_tags = {","    \"env\" = var.env","  }","  prefix = var.prefix","  name_prefix = \"${local.prefix}-${var.env}\"","}","","# ECR Repository for MySQL","resource \"aws_ecr_repository\" \"mysql\" {","  name = \"my-mysql-repo\"","  force_delete = true","  tags = merge(local.default_tags, { \"Name\" = \"my-mysql-repo\" })","}","","# ECR Repository for WebApp","resource \"aws_ecr_repository\" \"webapp\" {","  name = \"my-webapp-repo\"","  force_delete = true","  tags = merge(local.default_tags, { \"Name\" = \"my-webapp-repo\" })","}","","# Retrieve IAM Instance Profile","data \"aws_iam_instance_profile\" \"ec2_profile\" {","  name = \"LabInstanceProfile\"","}","","# EC2 Instance for Kind Cluster","resource \"aws_instance\" \"my_amazon\" {","  ami                         = data.aws_ami.latest_amazon_linux.id","  instance_type               = \"t2.micro\"  ","  key_name                    = aws_key_pair.my_key.key_name","  vpc_security_group_ids      = [aws_security_group.my_sg.id]","  associate_public_ip_address = false","","  iam_instance_profile = data.aws_iam_instance_profile.ec2_profile.name","","  # Install Docker, Kind, kubectl and create Kind cluster","  user_data = <<-EOF","    #!/bin/bash","    set -ex","","    # Update system and install Docker","    sudo yum update -y","    sudo amazon-linux-extras enable docker","    sudo yum install -y docker","    sudo systemctl start docker","    sudo systemctl enable docker","    sudo usermod -aG docker ec2-user","","    # Install Kind","    curl -sLo kind https://kind.sigs.k8s.io/dl/v0.11.0/kind-linux-amd64","    sudo install -o root -g root -m 0755 kind /usr/local/bin/kind","    rm -f ./kind","","    # Install kubectl","    curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"","    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl","    rm -f ./kubectl","","    # Create kind.yaml file","    cat <<EOF2 > kind.yaml","    kind: Cluster","    apiVersion: kind.x-k8s.io/v1alpha4","    nodes:","    - role: control-plane","      image: kindest/node:v1.23.17@sha256:14d0a9a892b943866d7e6be119a06871291c517d279aedb816a4b4bc0ec0a5b3","      extraPortMappings:","      - containerPort: 30000","        hostPort: 30000","      - containerPort: 30001","        hostPort: 30001","    EOF2","","    # Create Kind cluster","    kind create cluster --config kind.yaml","","  EOF","","  lifecycle {","    create_before_destroy = true","  }","","  tags = merge(local.default_tags, { \"Name\" = \"kind-cluster-instance\" })","}","","# Key Pair","resource \"aws_key_pair\" \"my_key\" {","  key_name   = \"assignment-dev\"","  public_key = file(\"~/.ssh/assignment-dev.pub\")","}","","# Security Group","resource \"aws_security_group\" \"my_sg\" {","  name        = \"allow_ssh\"","  description = \"Allow SSH inbound traffic\"","  vpc_id      = data.aws_vpc.default.id","  ","  ingress {","    description = \"SSH from everywhere\"","    from_port   = 22","    to_port     = 22","    protocol    = \"tcp\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","","  ingress {","    description = \"HTTP\"","    from_port   = 80","    to_port     = 80","    protocol    = \"tcp\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","","  ingress {","    description = \"NodePort for K8s\"","    from_port   = 30000","    to_port     = 32767","    protocol    = \"tcp\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","","  egress {","    from_port   = 0","    to_port     = 0","    protocol    = \"-1\"","    cidr_blocks = [\"0.0.0.0/0\"]","  }","","  tags = merge(local.default_tags, { \"Name\" = \"${local.name_prefix}-sg\" })","}","","# Elastic IP","resource \"aws_eip\" \"static_eip\" {","  instance = aws_instance.my_amazon.id","  tags     = merge(local.default_tags, { \"Name\" = \"${local.name_prefix}-eip\" })","}",""]}]]},"ace":{"folds":[],"scrolltop":1897,"scrollleft":0,"selection":{"start":{"row":163,"column":0},"end":{"row":163,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":134,"state":"start","mode":"ace/mode/terraform"}},"timestamp":1740882686259,"hash":"644872b87d8e62c5de6e59f5e7c5cd06d4a63da3"}